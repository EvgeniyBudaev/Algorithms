package main

import (
	"fmt"
	"sort"
)

/* Find the middle element
https://www.codewars.com/kata/545a4c5a61aa4c6916000755/train/go

В рамках этого задания вам необходимо создать функцию, которая при передаче триплета возвращает индекс числового
элемента, расположенного между двумя другими элементами.

Входными данными функции будет массив из трёх различных чисел (в Haskell это кортеж).

Например:

gimme([2, 3, 1]) => 0
2 — это число, которое находится между 1 и 3, а индекс 2 во входном массиве равен 0.

Другой пример (просто для ясности):

gimme([5, 10, 14]) => 1
10 — это число, которое находится между 5 и 14, а индекс 10 во входном массиве равен 1.
*/

func main() {
	array := [3]int{2, 3, 1}
	fmt.Println(Gimme(array)) // 0
}

// Gimme возвращает индекс числа, расположенного между двумя другими элементами.
// time: O(n), space: O(n), где n - длина
func Gimme(array [3]int) int {
	arrayCopy := array      // Создаем копию массива для сортировки
	sort.Ints(arrayCopy[:]) // Сортируем массив time: O(n log n)
	middle := arrayCopy[1]  // Находим среднее число

	// Находим индекс среднего элемента в исходном массиве
	for i, num := range array {
		if num == middle { // Если элемент равен среднему числу, возвращаем его индекс
			return i
		}
	}

	return -1 // такого не должно быть по условию задачи
}
