package main

import (
	"fmt"
	"sort"
)

/* Merge two sorted arrays into one
https://www.codewars.com/kata/5899642f6e1b25935d000161/train/go

Вам даны два отсортированных массива, содержащих только целые числа. Эти массивы можно сортировать как по возрастанию,
так и по убыванию. Ваша задача — объединить их в один массив, обеспечив следующее:
Результирующий массив отсортирован по возрастанию.
Все повторяющиеся значения удаляются, поэтому каждое целое число встречается только один раз.
Если оба входных массива пусты, вернуть пустой массив.
Проверка входных данных не требуется, так как оба массива гарантированно содержат ноль или более целых чисел.

Examples (input -> output)
* [1, 2, 3, 4, 5], [6, 7, 8, 9, 10] -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
* [1, 3, 5, 7, 9], [10, 8, 6, 4, 2] -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
* [1, 3, 5, 7, 9, 11, 12], [1, 2, 3, 4, 5, 10, 12] -> [1, 2, 3, 4, 5, 7, 9, 10, 11, 12]
*/

func main() {
	arr1 := []int{1, 3, 5, 7, 9}
	arr2 := []int{10, 8, 6, 4, 2}
	fmt.Println(MergeArrays(arr1, arr2)) // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
}

// MergeArrays объединяет два неотсортированных массива в один отсортированный массив.
// time: O(n), space: O(n), n - суммарная длина массивов
func MergeArrays(arr1, arr2 []int) []int {
	if len(arr1) == 0 && len(arr2) == 0 {
		return []int{}
	}

	merged := append(arr1, arr2...) // Объединяем оба массива

	// Удаляем дубликаты и учитываем порядок сортировки
	unique := make(map[int]bool)
	var result []int

	for _, num := range merged {
		if !unique[num] {
			unique[num] = true
			result = append(result, num)
		}
	}

	sort.Ints(result) // Сортируем результат по возрастанию
	return result
}
