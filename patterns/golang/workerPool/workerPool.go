package main

import (
	"fmt"
	"time"
)

/*
Паттерн Worker Pool — это шаблон многопоточности, в котором создаётся пул из рабочих процессов для одновременной
обработки задач из очереди. Главные компоненты паттерна: система очередей для доставки задач воркерам (работникам) и
логика получения задач. Обычно система очередей представляет собой канал, а логика получения задач заключается в том,
что бездействующие воркеры (работники) будут брать задачи в порядке очереди.
*/

// worker это наш рабочий, который принимает два канала:
// jobs - канал задач, это входные данные для обработки
// results - канал результатов, это результаты работы воркера
func worker(id int, jobs <-chan int, results chan<- int) {
	for j := range jobs {
		// для наглядности будем выводить какой рабочий начал работу и его задачу
		fmt.Println("рабочий", id, "запущен задача", j)
		// немного замедлим выполнение рабочего
		time.Sleep(time.Second)
		// для наглядности выводим какой рабочий завершил какую задачу
		fmt.Println("рабочий", id, "закончил задача", j)
		// отправляем результат в канал результатов
		results <- j + 1
	}
}

func main() {
	// допустим у нас 5 задач, которые нужно выполнить
	const numJobs = 5
	// создаем буферизованный канал для принятия задач в воркер
	jobs := make(chan int, numJobs)
	// создаем буферизованный канал для отправки результатов
	results := make(chan int, numJobs)

	// создаем и запускаем 3 воркера, это и есть пул,
	// передаем id, это для наглядности, канал задач и канал результатов
	for w := 1; w <= 3; w++ {
		go worker(w, jobs, results)
	}

	// в канал задач отправляем какие-то данные
	// задач у нас 5, а воркера 3, значит одновременно решается только 3 задачи
	for j := 1; j <= numJobs; j++ {
		jobs <- j
	}
	// как вы помните, закрываем канал на стороне отправителя
	close(jobs)

	// забираем из канала результатов результаты ;)
	// можно присваивать переменной, или выводить на экран, но мы не будем
	for a := 1; a <= numJobs; a++ {
		<-results
	}
}
