package array.Candy;

/* 135. Candy
https://leetcode.com/problems/candy/description/

В очереди стоят n детей. Каждому дочернему ребенку присваивается значение рейтинга, указанное в рейтингах
целочисленного массива.
Вы даете конфеты этим детям при соблюдении следующих требований:
У каждого ребенка должна быть хотя бы одна конфета.
Дети с более высоким рейтингом получают больше конфет, чем их соседи.
Верните минимальное количество конфет, которое вам нужно, чтобы раздать конфеты детям.

Input: ratings = [1,0,2]
Output: 5
Пояснение: Вы можете передать первому, второму и третьему ребенку по 2, 1, 2 конфеты соответственно.

Input: ratings = [1,2,2]
Output: 4
Пояснение: Вы можете передать первому, второму и третьему ребенку по 1, 2, 1 конфету соответственно.
Третий ребенок получает 1 конфету, поскольку он удовлетворяет двум вышеуказанным условиям.
*/

public class Candy {
    public static void main(String[] args) {
        int[] ratings = {1, 0, 2};
        System.out.println(candy(ratings)); // 5
    }

    // candy - функция, которая принимает рейтинги детей и возвращает минимальное количество конфет, которое нужно дать детям.
    // time: O(n), space: O(n)
    private static int candy(int[] ratings) {
        int n = ratings.length; // Длина массива рейтингов
        int[] candies = new int[n]; // Создаем массив конфет длины n

        // Инициализируем массив конфет значениями 1
        for (int i = 0; i < n; i++) {
            candies[i] = 1;
        }

        // Проход слева направо
        for (int i = 1; i < n; i++) {
            // Если рейтинг текущего ребенка больше рейтинга предыдущего ребенка, то увеличиваем количество конфет на 1.
            if (ratings[i] > ratings[i - 1]) {
                candies[i] = candies[i - 1] + 1;
            }
        }

        // Проход справа налево
        for (int i = n - 2; i >= 0; i--) {
            // Если рейтинг текущего ребенка больше рейтинга следующего ребенка, то увеличиваем количество конфет на 1.
            if (ratings[i] > ratings[i + 1]) {
                candies[i] = Math.max(candies[i], candies[i + 1] + 1);
            }
        }

        // Суммируем все конфеты
        int total = 0; // Инициализируем переменную total, которая будет хранить сумму конфет
        for (int candy : candies) {
            total += candy;
        }

        return total; // Возвращаем сумму конфет
    }
}
