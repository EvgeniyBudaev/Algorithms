package main

import (
	"fmt"
)

/* 204. Count Primes
https://leetcode.com/problems/count-primes/description/

Для заданного целого числа n вернуть количество простых чисел, которые строго меньше n.

Input: n = 10
Output: 4
Пояснение: Существует 4 простых числа, меньших 10: 2, 3, 5, 7.
*/

func main() {
	fmt.Println(countPrimes(10)) // 4
}

// countPrimes - реализация решета Эратосфена.
// time: O(n*log(log(n))), space: O(n)
func countPrimes(n int) int {
	// Если число меньше или равно 2, то нет простых чисел.
	if n <= 2 {
		return 0
	}

	isComposite := make([]bool, n) // Массив, где каждый элемент обозначает, является ли число составным или нет
	count := 0                     // Счетчик простых чисел

	for i := 2; i < n; i++ { // Реребираем все числа от 2 до n-1
		if !isComposite[i] { // Усли число не является составным, то увеличиваем счетчик простых чисел и отмечаем все его кратные числа как составные.
			count++                         // Увеличиваем счетчик простых чисел
			for j := i * 2; j < n; j += i { // Отмечаем все кратные числа как составные.
				isComposite[j] = true // Отмечаем число как составное.
			}
		}
	}

	// Возвращаем количество простых чисел, меньших n.
	return count
}
