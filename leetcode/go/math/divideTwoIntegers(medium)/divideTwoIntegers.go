package main

import (
	"fmt"
	"math"
)

/* 29. Divide Two Integers
https://leetcode.com/problems/divide-two-integers/description/

Даны два целых числа: делимое и делитель. Разделите два целых числа без использования умножения, деления и оператора mod.

Целочисленное деление должно усекаться в сторону нуля, что означает потерю дробной части. Например, 8,345 будет усечено
до 8, а -2,7335 будет усечено до -2.

Верните частное после деления делимого на делитель.

Примечание: предположим, что мы имеем дело со средой, которая может хранить только целые числа в диапазоне 32-битных
знаковых целых чисел: [−231, 231 − 1]. Для этой задачи, если частное строго больше 231 - 1, то верните 231 - 1,
а если частное строго меньше -231, то верните -231.

Input: dividend = 10, divisor = 3
Output: 3
Пояснение: 10/3 = 3,33333, что усекается до 3.
*/

func main() {
	fmt.Println(divide(10, 3)) // 3
}

// divide - деление целых чисел.
// time: O(log(dividend)), space: O(1)
func divide(dividend int, divisor int) int {
	// Если делимое равно math.MinInt32, а делитель -1, то результат будет больше math.MaxInt32.
	if dividend == math.MinInt32 && divisor == -1 { // Из-за того, что деление не работает для math.MinInt32
		return math.MaxInt32
	}

	negative := false // Результат будет отрицательным?
	// Если делимое и делитель имеют разные знаки, то результат будет отрицательным.
	if (dividend < 0) != (divisor < 0) {
		negative = true
	}

	dividend, divisor = abs(dividend), abs(divisor) // Сделаем делимое и делитель положительными.

	result := 0               // Результат деления.
	for dividend >= divisor { // Пока делимое больше или равно делителю.
		power := 1                // Степень двойки.
		val := divisor            // Значение делителя.
		for val+val <= dividend { // Пока значение делителя меньше или равно делимому.
			val += val     // Увеличиваем значение делителя.
			power += power // Увеличиваем степень двойки.
		}

		dividend -= val // Вычитаем значение делителя из делимого.
		result += power // Добавляем степень двойки к результату.
	}

	if negative { // Если результат должен быть отрицательным, то умножаем его на -1.
		result = -result // Умножаем на -1.
	}

	if result > math.MaxInt32 { // Если результат больше максимального значения, то возвращаем максимальное значение.
		return math.MaxInt32
	}

	if result < math.MinInt32 { // Если результат меньше минимального значения, то возвращаем минимальное значение.
		return math.MinInt32
	}

	return result // Возвращаем результат.
}

// abs - модуль числа.
// time: O(1), space: O(1)
func abs(x int) int {
	if x < 0 {
		return -x
	}
	return x
}
