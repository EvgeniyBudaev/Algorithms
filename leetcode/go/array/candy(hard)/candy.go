package main

import "fmt"

/* 135. Candy
https://leetcode.com/problems/candy/description/

В очереди стоят n детей. Каждому дочернему ребенку присваивается значение рейтинга, указанное в рейтингах
целочисленного массива.
Вы даете конфеты этим детям при соблюдении следующих требований:
У каждого ребенка должна быть хотя бы одна конфета.
Дети с более высоким рейтингом получают больше конфет, чем их соседи.
Верните минимальное количество конфет, которое вам нужно, чтобы раздать конфеты детям.

Input: ratings = [1,0,2]
Output: 5
Пояснение: Вы можете передать первому, второму и третьему ребенку по 2, 1, 2 конфеты соответственно.

Input: ratings = [1,2,2]
Output: 4
Пояснение: Вы можете передать первому, второму и третьему ребенку по 1, 2, 1 конфету соответственно.
Третий ребенок получает 1 конфету, поскольку он удовлетворяет двум вышеуказанным условиям.
*/

func main() {
	ratings := []int{1, 0, 2}
	r := candy(ratings)
	fmt.Println(r)
}

// candy - функция, которая принимает рейтинги детей и возвращает минимальное количество конфет, которое нужно дать детям.
// time: O(n), space: O(n)
func candy(ratings []int) int {
	n := len(ratings) // Длина массива рейтингов

	// Создаем массив candies длины n, где каждый элемент инициализируется значением 1.
	candies := make([]int, n)
	for i := range candies {
		candies[i] = 1
	}

	// Расширение к правой стороне
	for i := 1; i < n; i++ {
		// Если рейтинг текущего ребенка больше рейтинга предыдущего ребенка, то увеличиваем количество конфет на 1.
		if ratings[i] > ratings[i-1] {
			candies[i] = candies[i-1] + 1
		}
	}

	// Расширение к левой стороне
	for i := n - 2; i >= 0; i-- {
		// Если рейтинг текущего ребенка больше рейтинга следующего ребенка, то увеличиваем количество конфет на 1.
		if ratings[i] > ratings[i+1] {
			candies[i] = max(candies[i], candies[i+1]+1)
		}
	}

	// Суммируем все конфеты
	total := 0 // Инициализируем переменную total, которая будет хранить сумму конфет
	for _, c := range candies {
		total += c
	}

	return total // Возвращаем сумму конфет
}
