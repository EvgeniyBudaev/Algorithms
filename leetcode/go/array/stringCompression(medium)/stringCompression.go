package main

import (
	"fmt"
	"strconv"
)

/* https://leetcode.com/problems/string-compression/description/

Учитывая массив символов, сожмите его, используя следующий алгоритм:
Начните с пустой строки s. Для каждой группы последовательно повторяющихся символов в символах:

Если длина группы равна 1, добавьте символ к s.
В противном случае добавьте символ, за которым следует длина группы.
Сжатую строку s не следует возвращать отдельно, а хранить во входном массиве символов chars. Обратите внимание, что
длина группы, равная 10 или более, будет разбита на несколько символов в виде символов.

После завершения изменения входного массива верните новую длину массива.
Вы должны написать алгоритм, который использует только постоянное дополнительное пространство.

Input: chars = ["a","a","b","b","c","c","c"]
Output: вернуть 6, и первые 6 символов входного массива должны быть: ["a","2","b","2","c","3"]
Пояснение: Это группы «aa», «bb» и «ccc». Это сжимается до «a2b2c3».
*/

func main() {
	chars := []byte{'a', 'a', 'b', 'b', 'c', 'c', 'c'}
	r := compress(chars)
	fmt.Println(r)
}

func compress(chars []byte) int {
	i, j := 0, 0
	for j < len(chars) {
		count := 0
		curr := chars[j]
		for j < len(chars) && chars[j] == curr {
			j++
			count++
		}
		chars[i] = curr
		i++
		if count > 1 {
			for _, digit := range strconv.Itoa(count) {
				chars[i] = byte(digit)
				i++
			}
		}
	}
	return i
}
