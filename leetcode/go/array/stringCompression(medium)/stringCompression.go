package main

import (
	"fmt"
	"strconv"
)

/* 443. String Compression
https://leetcode.com/problems/string-compression/description/

Учитывая массив символов, сожмите его, используя следующий алгоритм:
Начните с пустой строки s. Для каждой группы последовательно повторяющихся символов в символах:

Если длина группы равна 1, добавьте символ к s.
В противном случае добавьте символ, за которым следует длина группы.
Сжатую строку s не следует возвращать отдельно, а хранить во входном массиве символов chars. Обратите внимание, что
длина группы, равная 10 или более, будет разбита на несколько символов в виде символов.

После завершения изменения входного массива верните новую длину массива.
Вы должны написать алгоритм, который использует только постоянное дополнительное пространство.

Input: chars = ["a","a","b","b","c","c","c"]
Output: вернуть 6, и первые 6 символов входного массива должны быть: ["a","2","b","2","c","3"]
Пояснение: Это группы «aa», «bb» и «ccc». Это сжимается до «a2b2c3».
*/

func main() {
	chars := []byte{'a', 'a', 'b', 'b', 'c', 'c', 'c'}
	fmt.Println(compress(chars)) // 6
}

// compress - возвращает новую длину массива символов после сжатия.
// time: O(n), space: O(1)
func compress(chars []byte) int {
	i, j := 0, 0 // Используем два указателя: i для записи в chars и j для обхода

	for j < len(chars) { // Проходим по массиву символов
		count := 0              // Счетчик для подсчета количества повторяющихся символов
		currentChar := chars[j] // Текущий символ
		// Считаем количество повторяющихся символов
		for j < len(chars) && chars[j] == currentChar {
			j++     // Переходим к следующему символу
			count++ // Увеличиваем счетчик
		}
		chars[i] = currentChar // Записываем текущий символ в chars
		i++                    // Переходим к следующему индексу для записи
		// Если количество повторяющихся символов больше 1, записываем количество символов после текущего символа
		if count > 1 {
			for _, digit := range strconv.Itoa(count) {
				chars[i] = byte(digit) // Записываем цифру в chars
				i++                    // Переходим к следующему индексу для записи
			}
		}
	}

	// Возвращаем новую длину массива символов
	return i
}
