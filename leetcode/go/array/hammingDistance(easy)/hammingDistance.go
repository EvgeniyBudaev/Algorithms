package main

import (
	"fmt"
)

/* 461. Hamming Distance
https://leetcode.com/problems/hamming-distance/description/

Расстояние Хэмминга между двумя целыми числами — это количество позиций, в которых соответствующие биты различны.
Даны два целых числа x и y, верните расстояние Хэмминга между ними..

Input: x = 1, y = 4
Output: 2
Объяснение:
1   (0 0 0 1)
4   (0 1 0 0)
       ↑   ↑
Стрелки выше указывают на позиции, в которых соответствующие биты отличаются.
*/

func main() {
	fmt.Println(hammingDistance(1, 4)) // 2
}

// hammingDistance функция, которая принимает на вход два целых числа и возвращает расстояние Хэмминга между ними.
// time: O(1) (константное время) - операции над числами занимают константное время
// space: O(1) (константное пространство) - используем только константные переменные
func hammingDistance(x int, y int) int {
	c := fmt.Sprintf("%032b", x) // Переводим в двоичное число с 32 знаками
	g := fmt.Sprintf("%032b", y) // Переводим в двоичное число с 32 знаками
	count := 0                   // Счетчик разрядов, где биты отличаются

	for i := 0; i < len(c); i++ {
		if c[i] != g[i] { // Если разряды разные, увеличиваем счетчик
			count++
		}
	}

	return count
}
