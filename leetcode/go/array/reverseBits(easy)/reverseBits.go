package main

import (
	"fmt"
	"strconv"
)

/* 190. Reverse Bits
https://leetcode.com/problems/reverse-bits/description/

Обратные биты заданного 32-битного целого числа без знака.

Примечание:

Обратите внимание, что в некоторых языках, таких как Java, нет типа целого числа без знака. В этом случае и входные, и
выходные данные будут заданы как тип целого числа со знаком. Они не должны влиять на вашу реализацию, поскольку
внутреннее двоичное представление целого числа одинаково, независимо от того, является ли оно знаковым или беззнаковым.
В Java компилятор представляет целые числа со знаком, используя нотацию дополнения до 2. Поэтому в примере 2 выше
входные данные представляют целое число со знаком -3, а выходные данные представляют целое число со знаком -1073741825.

Input: n = 00000010100101000001111010011100
Output:    964176192 (00111001011110000010100101000000)
Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.
*/

func main() {
	num := uint32(00000010100101000001111010011100) // Объявляем переменную для записи числа
	fmt.Println(reverseBits(num))                   // 964176192
}

// reverseBits - Возвращает обратное число без знака.
// time: O(n), где n - длина числа, space: O(n)
func reverseBits(num uint32) uint32 {
	revNumString := "" // Объявляем переменную для записи обратного числа

	for _, char := range fmt.Sprintf("%032b", num) { // Перебираем символы числа
		revNumString = string(char) + revNumString // Добавляем символ в начало строки
	}

	revNum, _ := strconv.ParseUint(revNumString, 2, 32) // Преобразуем обратное число в целое число без знака
	return uint32(revNum)                               // Возвращаем обратное число
}
