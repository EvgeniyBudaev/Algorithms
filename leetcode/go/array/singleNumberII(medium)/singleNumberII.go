package main

import (
	"fmt"
	"sort"
)

/* 137. Single Number II
https://leetcode.com/problems/single-number-ii/description/

Дан целочисленный массив nums, где каждый элемент встречается три раза, за исключением одного, который встречается ровно
один раз. Найдите единственный элемент и верните его.
Вам необходимо реализовать решение с линейной сложностью времени выполнения и использовать только постоянное
дополнительное пространство.

Input: nums = [2,2,3,2]
Output: 3
*/

func main() {
	fmt.Println(singleNumber([]int{2, 2, 3, 2})) // 3
}

// singleNumber находит уникальный элемент в массиве.
// time: O(n), space: O(1)
func singleNumber(nums []int) int {
	if len(nums) == 1 { // Если массив состоит из одного элемента, то он и является единственным
		return nums[0]
	}

	sort.Ints(nums) // Сортируем массив

	if nums[0] != nums[1] { // Если первый элемент не равен второму, значит он и является единственным
		return nums[0]
	}

	// Если последний элемент не равен предпоследнему, значит он и является единственным
	if nums[len(nums)-1] != nums[len(nums)-2] {
		return nums[len(nums)-1]
	}

	for i := 1; i < len(nums)-1; i++ { // Проходимся по массиву от второго до предпоследнего элемента
		// Если текущий элемент не равен предыдущему и следующему, значит он и является единственным
		if nums[i] != nums[i-1] && nums[i] != nums[i+1] {
			return nums[i]
		}
	}

	return -1 // Если не найден, возвращаем -1
}
