package main

import "fmt"

/* 724. Find Pivot Index
https://leetcode.com/problems/find-pivot-index/description/

Учитывая массив целых чисел nums, вычислите индекс поворота этого массива.
Индекс поворота — это индекс, где сумма всех чисел строго слева от индекса равна сумме всех чисел строго справа от индекса.
Если индекс находится на левом краю массива, то левая сумма равна 0, поскольку слева нет элементов. Это также применимо к правому краю массива.
Верните самый левый индекс поворота. Если такого индекса не существует, верните -1.

Input: nums = [1,7,3,6,5,6]
Output: 3
Объяснение:
Индекс поворота равен 3.
Левая сумма = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11
Правая сумма = nums[4] + nums[5] = 5 + 6 = 11
*/

func main() {
	nums := []int{1, 7, 3, 6, 5, 6}
	fmt.Println(pivotIndex(nums)) // 3
}

// pivotIndex - находит индекс поворота массива.
// time: O(n), space: O(1)
func pivotIndex(nums []int) int {
	totalSum := 0 // Общая сумма всех элементов массива.
	// Вычисляем общую сумму всех элементов.
	for _, num := range nums {
		totalSum += num
	}

	leftSum := 0 // Сумма всех элементов слева от текущего элемента.
	for i, num := range nums {
		// Проверяем, равна ли левая сумма (totalSum - leftSum - num)
		if leftSum == totalSum-leftSum-num {
			return i
		}
		leftSum += num // Обновляем левую сумму.
	}

	// Если не найден индекс поворота, возвращаем -1.
	return -1
}
