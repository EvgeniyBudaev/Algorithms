package main

import (
	"fmt"
	"math"
	"strings"
	"unicode"
)

/* 8. String to Integer (atoi)
https://leetcode.com/problems/string-to-integer-atoi/description/

Реализуйте функцию myAtoi(string s), которая преобразует строку в 32-битное целое число со знаком.

Алгоритм для myAtoi(string s) выглядит следующим образом:

Пробелы: игнорировать все начальные пробелы (" ").
Знаковость: определить знак, проверив, является ли следующий символ '-' или '+', предполагая положительность, если ни
один из них отсутствует.
Преобразование: прочитать целое число, пропуская начальные нули, пока не встретится нецифровой символ или не будет
достигнут конец строки. Если не было считано ни одной цифры, то результатом будет 0.
Округление: если целое число выходит за пределы диапазона 32-битных знаковых целых чисел [-231, 231 - 1], то округлить
целое число, чтобы остаться в пределах диапазона. В частности, целые числа меньше -231 следует округлить до -231, а
целые числа больше 231 - 1 следует округлить до 231 - 1. Верните целое число в качестве конечного результата.

Input: s = "42"
Output: 42

Объяснение:
Подчеркнутые символы — это то, что считывается, а каретка — это текущая позиция считывателя.
Шаг 1: «42» (символы не считываются, так как нет начальных пробелов)
^
Шаг 2: «42» (символы не считываются, так как нет ни «-», ни «+»)
^
Шаг 3: «42» («42» считывается)
*/

func main() {
	fmt.Println(myAtoi("42")) // 42
}

// myAtoi - функция преобразования строки в целое число со знаком.
// time complexity: O(n), space complexity: O(1)
func myAtoi(s string) int {
	s = strings.TrimSpace(s) // Убираем пробелы
	if len(s) == 0 {         // Если строка пустая
		return 0
	}

	sign := 1 // По умолчанию знак +
	i := 0    // Индекс текущей позиции
	// Проверяем знак
	if s[i] == '-' || s[i] == '+' { // Если первый символ '-' или '+'
		if s[i] == '-' {
			sign = -1 // Если знак '-', меняем знак на -
		}
		i++ // Переходим к следующему символу
	}

	result := 0 // Результат

	// Читаем цифры
	for i < len(s) && unicode.IsDigit(rune(s[i])) { // Проверяем, что символ - цифра
		digit := int(s[i] - '0') // Преобразуем символ в цифру

		// Проверка на переполнение
		if result > (math.MaxInt32-digit)/10 {
			// Если число больше максимального положительного 32-битного целого числа
			if sign == 1 {
				// Если знак положительный, возвращаем максимальное положительное число
				return math.MaxInt32
			}
			// Если знак отрицательный, возвращаем минимальное отрицательное число
			return math.MinInt32
		}

		result = result*10 + digit // Добавляем цифру к результату
		i++                        // Переходим к следующему символу
	}

	// Возвращаем результат с учетом знака
	return result * sign
}
