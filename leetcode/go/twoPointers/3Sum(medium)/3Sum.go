package main

import (
	"fmt"
	"sort"
)

/* 15. 3Sum
https://leetcode.com/problems/3sum/description/

Учитывая целочисленный массив nums, верните все тройки [nums[i], nums[j], nums[k]] такие,
что i != j, i != k и j != k и nums[i] + nums[j] + nums[к] == 0.
Обратите внимание, что набор решений не должен содержать повторяющихся троек.

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation:
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
Отдельные тройки — это [-1,0,1] и [-1,-1,2].
Обратите внимание, что порядок вывода и порядок троек не имеют значения.

Input: nums = [0,1,1]
Output: []
Пояснение: Единственная возможная тройка не дает в сумме 0.

Input: nums = [0,0,0]
Output: [[0,0,0]]
Пояснение: Сумма единственно возможной тройки равна 0.
*/

func main() {
	nums := []int{-1, 0, 1, 2, -1, -4}
	fmt.Println(threeSum(nums)) // [[-1 -1 2] [-1 0 1]]
}

// threeSum функция принимает массив целых чисел и возвращает все тройки чисел, которые имеют сумму равную 0.
// time: O(n^2), потому что мы используем два цикла for для перебора всех возможных пар чисел и троек.
// space: O(n), потому что мы используем вспомогательный массив для хранения результатов.
func threeSum(nums []int) [][]int {
	var res [][]int // Массив для хранения результатов
	sort.Ints(nums) // [-4, -1, -1, 0, 1, 2]

	for i := 0; i < len(nums); i++ {
		num := nums[i]
		// Если текущее число больше 0, дальнейшие числа тоже будут больше 0, и сумма не может быть 0
		if num > 0 {
			break
		}
		// Пропускаем дубликаты
		// Здесь мы проверяем, если текущее число num равно предыдущему числу nums[i-1], то мы пропускаем итерацию.
		// Это нужно для того, чтобы не рассматривать одно и то же число в качестве первого элемента тройки,
		// если оно уже было рассмотрено ранее. Например, если массив содержит несколько -1,
		// то мы не хотим рассматривать -1 как первый элемент несколько раз.
		if i > 0 && num == nums[i-1] {
			continue
		}
		left := i + 1          // Указатель на следующий элемент после текущего числа
		right := len(nums) - 1 // Указатель на последний элемент
		for left < right {
			sum := num + nums[left] + nums[right]
			if sum > 0 {
				right-- // Сумма слишком большая, уменьшаем правый указатель
			} else if sum < 0 {
				left++ // Сумма слишком маленькая, увеличиваем левый указатель
			} else {
				// Нашли тройку
				res = append(res, []int{num, nums[left], nums[right]})
				left++
				right--
				// Пропускаем дубликаты для левого и правого указателей
				// Это нужно для того, чтобы не добавлять одинаковые тройки в результат.
				// Например, если массив содержит несколько 1 и -1,
				// то мы не хотим добавлять несколько одинаковых троек [-1, 0, 1].
				for left < right && nums[left] == nums[left-1] {
					left++
				}
				for left < right && nums[right] == nums[right+1] {
					right--
				}
			}
		}
	}

	return res
}
