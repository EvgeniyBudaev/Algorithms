package main

import "fmt"

/* 36. Valid Sudoku
https://leetcode.com/problems/valid-sudoku/description/

Определите, действительна ли доска для судоку 9 x 9. Только заполненные ячейки подлежат проверке согласно следующим
правилам:

Каждая строка должна содержать цифры от 1 до 9 без повторений.
Каждый столбец должен содержать цифры 1–9 без повторений.
Каждый из девяти подполей сетки размером 3х3 должен содержать цифры от 1 до 9 без повторений.

Примечание:
Доска судоку (частично заполненная) может быть допустимой, но не обязательно решаемой.
Только заполненные ячейки должны быть проверены в соответствии с указанными правилами.

Input: board =
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true

Input: board =
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
*/

func main() {
	board := [][]byte{
		{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
		{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
		{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
		{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
		{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
		{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
		{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
		{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
		{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
	}

	fmt.Println(isValidSudoku(board)) // true
}

// isValidSudoku проверяет, является ли переданная доска валидной по правилам Sudoku.
// time complexity: O(1) - 9x9, space complexity: O(1) - 9x9
func isValidSudoku(board [][]byte) bool {
	boardSize := len(board)

	// Создаем слайсы множеств для отслеживания чисел в строках, столбцах и блоках 3x3
	rows := make([]map[byte]bool, boardSize)
	cols := make([]map[byte]bool, boardSize)
	boxes := make([]map[byte]bool, boardSize)

	// Инициализируем множества
	for i := 0; i < boardSize; i++ {
		rows[i] = make(map[byte]bool)
		cols[i] = make(map[byte]bool)
		boxes[i] = make(map[byte]bool)
	}

	// Проходим по всем ячейкам доски
	for r := 0; r < boardSize; r++ {
		for c := 0; c < boardSize; c++ {
			val := board[r][c]

			// Пропускаем пустые ячейки
			if val == '.' {
				continue
			}

			// Вычисляем индекс блока 3x3 (от 0 до 8)
			boxIndex := (r/3)*3 + c/3

			// Проверяем, встречалось ли число в текущей строке, столбце или блоке
			if rows[r][val] || cols[c][val] || boxes[boxIndex][val] {
				return false
			}

			// Добавляем число в соответствующие множества
			rows[r][val] = true
			cols[c][val] = true
			boxes[boxIndex][val] = true
		}
	}

	return true
}
