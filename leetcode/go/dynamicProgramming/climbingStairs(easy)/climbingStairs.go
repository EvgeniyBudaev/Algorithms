package main

import "fmt"

/* 70. Climbing Stairs
https://leetcode.com/problems/climbing-stairs/description/

Вы поднимаетесь по лестнице. Чтобы достичь вершины, нужно n шагов.
Каждый раз вы можете подняться на 1 или 2 ступеньки. Сколькими различными способами вы можете подняться на вершину?

Input: n = 2
Output: 2
Пояснение: Есть два способа подняться на вершину.
1. 1 шаг + 1 шаг
2. 2 шага

Input: n = 3
Output: 3
Пояснение: Есть три способа подняться на вершину.
1. 1 шаг + 1 шаг + 1 шаг
2. 1 шаг + 2 шага
3. 2 шага + 1 шаг
*/

func main() {
	fmt.Println(climbStairs(2)) // 2
}

// climbStairs вычисляет количество способов подняться по лестнице из n ступенек,
// когда за один шаг можно подняться на 1 или 2 ступеньки.
// Это эквивалентно нахождению (n+1)-го числа Фибоначчи.
func climbStairs(n int) int {
	// a и b представляют два последовательных числа в последовательности Фибоначчи
	// Изначально:
	// a = 1 (способ подняться на 1 ступеньку)
	// b = 1 (базовый случай для 0 ступенек - 1 способ "ничего не делать")
	a, b := 1, 1

	// Вычисляем числа Фибоначчи до n-го
	for i := 2; i <= n; i++ {
		// temp - временная переменная для хранения суммы двух предыдущих чисел
		temp := a + b
		// Сдвигаем значения:
		// b получает предыдущее значение a
		// a получает новое значение (сумму a и b)
		b = a
		a = temp
	}

	// В результате a содержит количество способов подняться на n ступенек
	return a
}
