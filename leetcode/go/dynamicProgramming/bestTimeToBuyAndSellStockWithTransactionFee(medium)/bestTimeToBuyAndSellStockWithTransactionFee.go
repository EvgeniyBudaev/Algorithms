package main

import "fmt"

/*
https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/description/

Вам дан массив prices, где prices[i] — это цена данной акции на i-й день, а также целочисленная комиссия, представляющая
 комиссию за транзакцию.
Найдите максимальную прибыль, которую вы можете получить. Вы можете совершить столько транзакций, сколько захотите, но
 вам придется платить комиссию за каждую транзакцию.
Примечание:
Вы не можете совершать несколько транзакций одновременно (т.е. вы должны продать акции, прежде чем купить их снова).
Комиссия за транзакцию взимается только один раз за каждую покупку и продажу акций.

Input: prices = [1,3,2,8,4,9], fee = 2
Output: 8
Пояснение: Максимальную прибыль можно получить за счет:
- Покупка по ценам[0] = 1
- Продажа по ценам[3] = 8
- Покупка по ценам[4] = 4
- Продажа по ценам[5] = 9
Общая прибыль равна ((8 – 1) – 2) + ((9 – 4) – 2) = 8.
*/

func main() {
	fmt.Println(maxProfit([]int{1, 3, 2, 8, 4, 9}, 2)) // 8
}

// maxProfit вычисляет максимальную прибыль от торговли акциями с учетом комиссии за транзакцию
func maxProfit(prices []int, fee int) int {
	n := len(prices)
	if n < 2 {
		return 0 // Невозможно совершить сделку при менее чем 2 днях
	}

	// free - максимальная прибыль, когда у нас нет акции в конце дня (можем купить на следующий день)
	// hold - максимальная прибыль, когда у нас есть акция в конце дня
	free := 0
	hold := -prices[0] // Покупаем акцию в первый день

	for i := 1; i < n; i++ {
		// Сохраняем предыдущее значение hold перед обновлением
		prevHold := hold

		// Обновляем hold: либо продолжаем держать акцию, либо покупаем сегодня (из состояния free)
		hold = max(hold, free-prices[i])

		// Обновляем free: либо остаемся без акции, либо продаем сегодня (из состояния hold) с учетом комиссии
		free = max(free, prevHold+prices[i]-fee)
	}

	// В конце оптимально остаться без акции (состояние free)
	return free
}
