package main

import "fmt"

/* 73. Set Matrix Zeroes
https://leetcode.com/problems/set-matrix-zeroes/description/

Дана целочисленная матрица m x n, если элемент равен 0, установите всю ее строку и столбец в 0.
Вы должны сделать это на месте.

Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]
*/

func main() {
	matrix := [][]int{{1, 1, 1}, {1, 0, 1}, {1, 1, 1}}
	setZeroes(matrix)
	fmt.Println(matrix) // [[1,0,1],[0,0,0],[1,0,1]]
}

// setZeroes - используем дополнительные массивы для хранения индексов нулевых элементов.
// time: O(n*m), space: O(n+m)
func setZeroes(matrix [][]int) {
	n := len(matrix)       // кол-во строк в матрице
	m := len(matrix[0])    // кол-во столбцов в матрице
	row := make([]bool, n) // дополнительный массив для хранения индексов нулевых элементов строк
	col := make([]bool, m) // дополнительный массив для хранения индексов нулевых элементов столбцов

	for i := 0; i < n; i++ { // проходим по всем элементам матрицы и записываем индексы нулевых элементов
		for j := 0; j < m; j++ { // в соответствующие массивы row и col
			if matrix[i][j] == 0 { // если элемент равен нулю, то записываем индексы в соответствующие массивы
				row[i] = true // если элемент равен нулю, то записываем индексы в соответствующие массивы
				col[j] = true // если элемент равен нулю, то записываем индексы в соответствующие массивы
			}
		}
	}

	for i := 0; i < n; i++ { // проходим по всем элементам матрицы и обнуляем строки и столбцы, в которых есть нулевые элементы
		for j := 0; j < m; j++ { // если в соответствующих массивах есть true, то обнуляем элементы в матрице
			if row[i] || col[j] { // если в соответствующих массивах есть true, то обнуляем элементы в матрице
				matrix[i][j] = 0 // если в соответствующих массивах есть true, то обнуляем элементы в матрице
			}
		}
	}
}
