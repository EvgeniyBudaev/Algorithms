package main

import "fmt"

/* 912. Sort an Array (Merge Sort)
https://leetcode.com/problems/sort-an-array/description/

Дан массив целых чисел nums, отсортируйте массив в порядке возрастания и верните его.

Вы должны решить задачу без использования каких-либо встроенных функций с временной сложностью O(nlog(n)) и с наименьшей
возможной пространственной сложностью

Input: nums = [5,2,3,1]
Output: [1,2,3,5]
Пояснение: После сортировки массива позиции некоторых чисел не меняются (например, 2 и 3), а позиции других чисел
меняются (например, 1 и 5).
*/

func main() {
	nums := []int{5, 2, 3, 1}
	fmt.Println(sortArray(nums)) // [1,2,3,5]
}

// sortArray - сортировка массива слиянием.
// time: O(n log(n)), space: O(n)
func sortArray(nums []int) []int {
	if len(nums) <= 1 {
		return nums
	}

	mid := len(nums) / 2               // разделение на две половины
	leftPart := sortArray(nums[:mid])  // сортировка левой половины
	rightPart := sortArray(nums[mid:]) // сортировка правой половины
	return merge(leftPart, rightPart)  // слияние отсортированных половин
}

// merge - функция слияния двух отсортированных массивов.
// time: O(n), space: O(n)
func merge(arr1, arr2 []int) []int {
	result := make([]int, 0, len(arr1)+len(arr2)) // объединение двух массивов в один
	p1, p2 := 0, 0                                // указатели на текущие элементы в обоих массивах

	// слияние массивов, пока один из указателей не достигнет конца своего массива
	for p1 < len(arr1) || p2 < len(arr2) {
		// если текущий элемент первого массива меньше или равен текущему элементу второго массива,
		// добавляем его в объединенный массив и сдвигаем указатель на первый массив
		if p2 >= len(arr2) || (p1 < len(arr1) && arr1[p1] <= arr2[p2]) {
			result = append(result, arr1[p1]) // добавление текущего элемента первого массива в объединенный массив
			p1++                              // сдвиг указателя на первый массив
		} else {
			result = append(result, arr2[p2]) // добавление текущего элемента второго массива в объединенный массив
			p2++                              // сдвиг указателя на второй массив
		}
	}

	// возвращаем объединенный отсортированный массив
	return result
}
