package main

import "fmt"

/*
https://leetcode.com/problems/numbers-with-same-consecutive-differences/description/

Учитывая два целых числа n и k, верните массив всех целых чисел длины n, где разница между всеми двумя последовательными
цифрами равна k. Вы можете вернуть ответ в любом порядке.
Обратите внимание, что целые числа не должны иметь ведущих нулей. Целые числа 02 и 043 не допускаются.

Input: n = 3, k = 7
Output: [181,292,707,818,929]
Объяснение: Обратите внимание: 070 не является допустимым числом, поскольку в нем есть ведущие нули.

Input: n = 2, k = 1
Output: [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]
*/

func main() {
	fmt.Println(numsSameConsecDiff(3, 7)) // [181,292,707,818,929]
}

// numsSameConsecDiff генерирует все n-значные числа, где разница между соседними цифрами равна k
func numsSameConsecDiff(n int, k int) []int {
	// Начинаем с цифр от 1 до 9 (первая цифра не может быть 0)
	list := []int{1, 2, 3, 4, 5, 6, 7, 8, 9}

	// Генерируем числа по одной цифре за итерацию
	for ; n > 1; n-- {
		var tmp []int

		// Для каждого числа из текущего списка
		for _, val := range list {
			lastDigit := val % 10 // Получаем последнюю цифру

			// Добавляем цифру с разницей +k (если она в допустимом диапазоне)
			if newDigit := lastDigit + k; newDigit < 10 {
				tmp = append(tmp, val*10+newDigit)
			}

			// Добавляем цифру с разницей -k (если k != 0 и цифра в допустимом диапазоне)
			if k != 0 {
				if newDigit := lastDigit - k; newDigit >= 0 {
					tmp = append(tmp, val*10+newDigit)
				}
			}
		}

		list = tmp // Обновляем список для следующей итерации
	}

	return list
}
