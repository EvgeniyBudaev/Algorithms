/* https://leetcode.com/problems/sudoku-solver/description/

Напишите программу, решающую судоку, заполняя пустые ячейки.

Решение судоку должно удовлетворять всем следующим правилам:

Каждая из цифр 1–9 должна встречаться ровно один раз в каждой строке.
Каждая из цифр 1–9 должна встречаться ровно один раз в каждом столбце.
Каждая из цифр 1–9 должна встретиться ровно один раз в каждом из 9 подполей сетки размером 3x3.
'.' символ указывает на пустые ячейки.

Input: board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
Output: [["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]
*/

/**
 * @param {string[][]} board
 * @return {string[][]} Do not return anything, modify board in-place instead.
 */
var solveSudoku = function(board) {
  dfs(board, 0, 0)
  return board;
};

let isValid = (board, row, column, value) => {
  let n = board.length;

  if (board[row].includes(value)) return false;

  for (let i = 0; i < n; i++) {
    if (board[i][column] === value) return false;
  }

  let [top, left] = [Math.floor(row / 3) * 3, Math.floor(column / 3) * 3];

  for (let i = top; i < top + 3; i++) {
    for (let j = left; j < left + 3; j++) {
      if (board[i][j] === value) return false;
    }
  }

  return true;
}

let dfs = (board, row, column) => {
  if (row === 9) return true;
  if (column === 9) return dfs(board, row + 1, 0);
  if (board[row][column] !== '.') return dfs(board, row, column + 1);

  for (let i = 1; i < 10; i++) {
    if (isValid(board, row, column, i.toString())) {
      board[row][column] = i.toString();
      if (dfs(board, row, column + 1)) return true;
      board[row][column] = '.';
    }
  }

  return false;
}

const board = [
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]];
console.log(solveSudoku(board));