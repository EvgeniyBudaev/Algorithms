/* https://leetcode.com/problems/largest-rectangle-in-histogram/description/

Учитывая массив целых чисел, представляющих высоту столбца гистограммы, где ширина каждого столбца равна 1, верните
площадь самого большого прямоугольника в гистограмме.

Input: heights = [2,1,5,6,2,3]
Output: 10
Пояснение: Выше представлена гистограмма, ширина каждого столбца которой равна 1.
Самый большой прямоугольник показан в красной области, его площадь = 10 единиц.
*/

/**
 * @param {number[]} heights
 * @return {number}
 */
var largestRectangleArea = function(heights) {
    // Инициализация: Создается пустой стек и переменная maxArea для хранения максимальной площади прямоугольника.
    // Также устанавливается индекс index для прохода по массиву heights.
    let stack = [];
    let maxArea = 0;
    let index = 0;

    // Цикл по массиву: Проходим по массиву heights с помощью индекса index. На каждом шаге сравниваем текущую высоту с
    // верхней точкой стека (если стек не пуст). Если текущая высота больше или равна, помещаем индекс в стек и
    // продолжаем движение вперед. Если меньше, начинаем процесс уменьшения размера прямоугольника.
    while (index < heights.length) {
        if (stack.length === 0 || heights[index] >= heights[stack[stack.length - 1]]) {
            stack.push(index);
            index++;
        } else {
            // Уменьшение размера прямоугольника: Когда текущая высота меньше высоты в верхней точке стека, мы знаем,
            // что мы достигли нижней точки прямоугольника. Вычисляем ширину прямоугольника как разницу между текущим
            // индексом и индексом нижней точки. Затем вычисляем площадь прямоугольника и обновляем maxArea, если
            // текущая площадь больше maxArea.
            let top = stack.pop();
            let height = heights[top];
            let width = stack.length === 0 ? index : index - stack[stack.length - 1] - 1;
            maxArea = Math.max(maxArea, height * width);
        }
    }
    // stack: [1, 4, 5]
    // maxArea: 10
    // index: 6

    // Обработка конца массива: После прохождения всего массива, когда индекс достигает конца массива, остаются в стеке
    // индексы верхних точек прямоугольников, которые еще не были обработаны. Мы повторяем процесс уменьшения размера
    // прямоугольника для оставшихся индексов в стеке.
    while (stack.length > 0) {
        let top = stack.pop();
        let height = heights[top];
        let width = stack.length === 0 ? index : index - stack[stack.length - 1] - 1;
        maxArea = Math.max(maxArea, height * width);
    }

    return maxArea;
};

console.log(largestRectangleArea([2,1,5,6,2,3])); // 10