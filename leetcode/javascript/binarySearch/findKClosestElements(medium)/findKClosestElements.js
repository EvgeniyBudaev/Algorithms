/* https://leetcode.com/problems/find-k-closest-elements/description/

Учитывая отсортированный массив целых чисел arr, два целых числа k и x, верните k ближайших к x целых чисел в массиве.
Результат также следует отсортировать по возрастанию.

Целое число a ближе к x, чем целое число b, если:
|a - x| < |b - x|, or
|a - x| == |b - x| and a < b

Input: arr = [1,2,3,4,5], k = 4, x = 3
Output: [1,2,3,4]

Input: arr = [1,2,3,4,5], k = 4, x = -1
Output: [1,2,3,4]
*/

/**
 * @param {number[]} arr
 * @param {number} k
 * @param {number} x
 * @return {number[]}
 */
var findClosestElements = function(arr, k, x) {
    // Инициализация указателей: Устанавливаются два указателя, left и right, которые изначально указывают на начало
    // массива и на позицию, с которой начинается последний возможный подмассив длины k соответственно.
    let left = 0, right = arr.length - k;
    while (left < right) {
        const mid = Math.floor((left + right) / 2);
        // Сравнение расстояний: Сравниваются два расстояния: от x до элемента в позиции mid и от x до элемента,
        // находящегося на k позиций правее mid. Если первое расстояние больше второго, это означает, что подмассив,
        // начинающийся справа от mid, потенциально ближе к x, поэтому left сдвигается на одну позицию вправо от mid.
        // В противном случае, если первое расстояние меньше или равно второму, right устанавливается равным mid,
        // сосредотачивая поиск на левую часть.
        if (x - arr[mid] > arr[mid + k] - x) left = mid + 1;
        else right = mid;
    }
    // Возврат результата: После завершения цикла while, когда left и right сходятся, возвращается подмассив длины k,
    // начинающийся с позиции left. Этот подмассив содержит k элементов, наиболее близких к x.
    return arr.slice(left, left + k);
};

console.log(findClosestElements([1,2,3,4,5], 4, 3)); // [1,2,3,4]