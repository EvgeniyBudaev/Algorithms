/* https://leetcode.com/problems/candy/description/

В очереди стоят n детей. Каждому дочернему ребенку присваивается значение рейтинга, указанное в рейтингах
целочисленного массива.
Вы даете конфеты этим детям при соблюдении следующих требований:
У каждого ребенка должна быть хотя бы одна конфета.
Дети с более высоким рейтингом получают больше конфет, чем их соседи.
Верните минимальное количество конфет, которое вам нужно, чтобы раздать конфеты детям.

Input: ratings = [1,0,2]
Output: 5
Пояснение: Вы можете передать первому, второму и третьему ребенку по 2, 1, 2 конфеты соответственно.

Input: ratings = [1,2,2]
Output: 4
Пояснение: Вы можете передать первому, второму и третьему ребенку по 1, 2, 1 конфету соответственно.
Третий ребенок получает 1 конфету, поскольку он удовлетворяет двум вышеуказанным условиям.
*/

/**
 * @param {number[]} ratings
 * @return {number}
 */
var candy = function(ratings) {
  const n = ratings.length;
  // Создается массив candies длины n, где n — количество детей, и каждый элемент массива инициализируется значением 1.
  // Это означает, что каждому ребенку изначально дается минимум одна конфета.
  const candies = new Array(n).fill(1);

  // Расширение к правой стороне
  // Проходится по массиву ratings справа налево (начиная со второго элемента до последнего), сравнивая текущий ребенок
  // с предыдущим. Если текущий ребенок имеет более высокий рейтинг, то ему добавляется дополнительная конфета по
  // сравнению с предыдущим ребенком (candies[i] = candies[i - 1] + 1). Это обеспечивает, что дети с более высокими
  // рейтингами получат больше конфет, чем их соседи слева.
  for (let i = 1; i < n; i++) { // candies: [1,1,2]
    if (ratings[i] > ratings[i - 1]) {
      candies[i] = candies[i - 1] + 1;
    }
  }

  // Расширение к левой стороне
  // После первого прохода, когда мы убедились, что дети имеют больше конфет, чем их соседи слева, теперь мы проверяем,
  // не могут ли дети получить еще больше конфет, сравнивая их с соседями справа. Проходимся по массиву ratings слева
  // направо (начиная с последнего элемента до второго), сравнивая текущего ребенка с следующим. Если текущий ребенок
  // имеет более высокий рейтинг, то он может получить столько же конфет, сколько у его соседа справа плюс одну
  // дополнительную (Math.max(candies[i], candies[i + 1] + 1)). Это позволяет детям с более высокими рейтингами получить
  // больше конфет, если это возможно.
  for (let i = n - 2; i >= 0; i--) { // candies: [2,1,2]
    if (ratings[i] > ratings[i + 1]) {
      candies[i] = Math.max(candies[i], candies[i + 1] + 1);
    }
  }
console.log("candies: ", candies);
  return candies.reduce((a, b) => a + b, 0);
};

console.log(candy([5, 3, 7, 8, 9])); // 5