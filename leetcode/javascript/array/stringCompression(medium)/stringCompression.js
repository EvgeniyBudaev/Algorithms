/* https://leetcode.com/problems/string-compression/description/

Учитывая массив символов, сожмите его, используя следующий алгоритм:
Начните с пустой строки s. Для каждой группы последовательно повторяющихся символов в символах:

Если длина группы равна 1, добавьте символ к s.
В противном случае добавьте символ, за которым следует длина группы.
Сжатую строку s не следует возвращать отдельно, а хранить во входном массиве символов chars. Обратите внимание, что
длина группы, равная 10 или более, будет разбита на несколько символов в виде символов.

После завершения изменения входного массива верните новую длину массива.
Вы должны написать алгоритм, который использует только постоянное дополнительное пространство.

Input: chars = ["a","a","b","b","c","c","c"]
Output: вернуть 6, и первые 6 символов входного массива должны быть: ["a","2","b","2","c","3"]
Пояснение: Это группы «aa», «bb» и «ccc». Это сжимается до «a2b2c3».
*/

/**
 * @param {string[]} chars
 * @return {number}
 */
var compress = function(chars) {
    let i = 0, j = 0;
    while (j < chars.length) {
        let count = 0;
        let curr = chars[j];
        while (j < chars.length && chars[j] === curr) {
            j++;
            count++;
        }
        chars[i++] = curr;
        if (count > 1) {
            for (let digit of count.toString()) {
                chars[i++] = digit;
            }
        }
    }
    return i;
};

console.log(compress(["a","a","b","b","c","c","c"])); // 6