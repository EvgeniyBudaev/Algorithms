/* https://leetcode.com/problems/sliding-window-maximum/description/
https://leetcode.com/problems/minimum-window-substring/solutions/3061723/js-fastest-easy-commented/

Вам дан массив целых чисел nums, есть скользящее окно размера k, которое перемещается из самого левого края массива в
самый правый. В окне вы можете увидеть только k чисел. Каждый раз скользящее окно перемещается вправо на одну позицию.
Верните максимальное число в скользящем окне.

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation:
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

Input: nums = [1], k = 1
Output: [1]
*/

/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number[]}
 */
var maxSlidingWindow = function(nums, k) {
    // Инициализировать пустой массив для хранения максимальных значений.
    const ans = [];
    // Инициализируйте дек (двустороннюю очередь) для хранения индексов элементов в текущем окне.
    const deque = [];

    // Перебрать входной массив.
    for (let i = 0; i < nums.length; i++) {
        // Удалить из дека индексы элементов, которые меньше или равны текущему элементу.
        while (deque.length > 0 && nums[deque[deque.length - 1]] <= nums[i]) {
            deque.pop();
        }
        // Удалить индексы элементов из дека, находящихся за пределами текущего окна.
        if (deque[0] <= i - k) deque.shift();
        // Добавьте текущий индекс в дек.
        deque.push(i);
        // Если текущий индекс достиг размера окна или больше, добавьте максимальный элемент из двухсторонней очереди в
        // массив результатов.
        if (i >= k - 1) ans.push(nums[deque[0]]);
    }

    // Верните массив, содержащий максимальный элемент в каждом скользящем окне.
    return ans;
};

console.log(maxSlidingWindow([1,3,-1], 3)); // [3,3,5,5,6,7]