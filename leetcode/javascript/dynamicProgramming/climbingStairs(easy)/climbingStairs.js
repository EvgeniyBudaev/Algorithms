// https://leetcode.com/problems/climbing-stairs/description/

/*
Вы поднимаетесь по лестнице. Чтобы достичь вершины, нужно n шагов.
Каждый раз вы можете подняться на 1 или 2 ступеньки. Сколькими различными способами вы можете подняться на вершину?
*/

/*
Input: n = 2
Output: 2
Пояснение: Есть два способа подняться на вершину.
1. 1 шаг + 1 шаг
2. 2 шага
*/

/*
Input: n = 3
Output: 3
Пояснение: Есть три способа подняться на вершину.
1. 1 шаг + 1 шаг + 1 шаг
2. 1 шаг + 2 шага
3. 2 шага + 1 шаг
*/

/**
 * @param {number} n
 * @return {number}
 */
var climbStairs = function(n) {
    // a и b являются двумя последовательными числами в последовательности Фибоначчи, где a всегда на один шаг впереди b
    // В начале a = 1 (способ достижения вершины после одной ступеньки), а b = 0
    // (нет способов достижения вершины без ступенек).
    let a = 1;
    let b = 0;

    // Цикл от 1 до n соответствует переходу к следующему уровню в последовательности Фибоначчи:
    // каждый новый элемент равен сумме двух предыдущих.
    for (let i = 1; i < n; i++) {
        // Вычисляется сумма a и b, которая представляет собой количество способов достичь i-й ступеньки (temp).
        let temp = a + b;
        // Затем обновляем значения a и b: b становится новым значением a, а a получает значение temp
        b = a;
        a = temp;
    }

    // После завершения цикла, когда i равно n, a содержит количество способов достичь вершины лестницы, а b содержит
    // количество способов достичь предпоследней ступеньки. Вероятно, что именно a и b вместе дают общее количество
    // способов
    return a + b;
};

console.log(climbStairs(2)); // 2